## This python script performs recombines detected and segmented features based on cloud top temperatures and combies those with precipitation to filter convective systems

import xarray as xr 
import warnings
warnings.simplefilter(action = "ignore", category = RuntimeWarning)
import glob 
import iris
import numpy as np
import pandas as pd
import os,sys
import datetime
from netCDF4 import Dataset
import tobac
from scipy import ndimage
from scipy.ndimage import generate_binary_structure

##########################################################################

## Import elevation file for 3000 m boundary 

dem = '/media/juli/Data/projects/data/elevation/elevation_600x350.nc'
elevations = xr.open_dataarray(dem)

# TP mask as coordinates 
dem_mask = elevations.where((elevations >= 3000) & (elevations.lat> 27) & (elevations.lat< 40) &(elevations.lon> 70)& (elevations.lon< 105))
dem_mask.coords['mask'] = (('lon', 'lat'), dem_mask)

#################################### Tracking parameters ########################


# Dictionary containing keyword arguments for the linking step:                                         
parameters_linking={}          
dt = 1800
dxy = 14126.0

s = generate_binary_structure(2,2)

parameters_linking['adaptive_stop']=0.2                                                                 
parameters_linking['adaptive_step']=0.95                                                                
parameters_linking['extrapolate']=0                                                                     
parameters_linking['order']=1

parameters_linking['subnetwork_size']= 1000000 # maximum size of subnetwork used for linking               
parameters_linking['memory']= 1                                                                          
parameters_linking['time_cell_min']= 12*dt                                                              
parameters_linking['method_linking']='predict'                                                          
#parameters_linking['method_detection']='threshold'                                                    
parameters_linking['v_max']= 100                                                                        
#parameters_linking['d_min']=2000                                                                      
#parameters_linking['d_min']=4*dxy # four times the grid spacing ?                                       
            
## Recombination of feature dataframes (update framenumbers)
savedir= '/media/juli/Data/projects/data/satellite_data/ncep/ctt/Save/precip_tracking'
years = np.arange(2001,2020)
years = years.astype(str)



# perform trajectory linking per year
for year in years: 
    # read in HDF5 files with saved features
    file_list= glob.glob(savedir  + '/Features_cells_gpm_imerg_'+year+'??_tp.h5')  
    file_list.sort()
    print('nr. of monthly feature files:', len(file_list), 'for year', year)

    i = 0 
    frames = 0 

    for file in file_list: 
        if i == 0:
            Features = pd.read_hdf(file, 'table')
            # read in data mask with segments for tracked cells 
            date= file[len(file)-12: len(file)-6]
            ds = Dataset(savedir+ '/Mask_Segmentation_gpm_imerg_'+date+'_tp.nc')
            mask = np.array(ds['segmentation_mask'])  
            # update total nr of frames 
            frames += np.shape(mask)[0] -1
            i = 1 
            print('file for: ',date, 'rows: ',Features.shape[0], 'frames: ', frames)

        features = pd.read_hdf(file, 'table')
        # update frame number and make sure they are sequential
        features['idx'] = features['frame']
        features['frame'] = features['frame']  + frames

        # append dataframes 
        Features = Features.append(features, ignore_index=True)      
        # read in data mask with segments for tracked cells 
        date= file[len(file)-12: len(file)-6]
        ds = Dataset(savedir+ '/Mask_Segmentation_gpm_imerg_'+date+'_tp.nc')
        mask = np.array(ds['segmentation_mask'])  
        #update total nr of frames
        frames += np.shape(mask)[0]
        print('file for: ',date, 'rows: ',features.shape[0], 'frames: ', frames)
        
    ## Perform trajectory linking with trackpy 
    Track=tobac.linking_trackpy(Features, np.zeros((10,10)),dt=dt,dxy=dxy,**parameters_linking)
    # remove nan values to only save the linked features 
    tracks = Track[Track.cell >= 0]
    tracks.to_hdf(os.path.join(savedir,'Tracks_'+ str(year) +'_precip_tpflag.h5'),'table' ) 
    print('trajectory linking for year  '+ str(year) +'performed.')
    
    # tracks['tp_flag'] = 0
    # pd.options.mode.chained_assignment = None

    # tracks['timestr'] = pd.to_datetime(tracks['time'].astype(str))
    
    # # loop through cells in detected feature frame                                                                                                           
    # for cell in np.unique(tracks.cell.values):
    #     subset = tracks[tracks.cell == cell]
    #     # loop through timesteps of features for specific cell                                                                                                
    #     for idx in subset.idx.values:
    #         if idx >= 1440:
    #             print(subset.idx.values)
    #         else:
                
    #         # idx is the timestep index for respective timestep or mask file                                                                                  
    #             # open corresponding precip and mask file                                                                                                          
    #             year = subset.timestr[subset.idx == idx].dt.year.values[0]
    #             month = subset.timestr[subset.idx == idx].dt.month.values[0]
    #             if len(str(month))== 1:
    #                 month= '0' + str(month)


    #             maskfile = '/media/juli/Data/projects/data/satellite_data/ncep/ctt/Save/precip_tracking/Mask_Segmentation_gpm_imerg_'+str(year) +str(month) \
    # + '.nc'
    #             mask = xr.open_dataarray(maskfile)
    #             mask= mask[:,:,:].T
    #             # get right timestep frames                                                                                                                   
    #             seg= mask[:,:, idx].T
    #             # get feature ID for frame                                                                                                                     
    #             featureid= subset.feature[subset.idx== idx].values[0]
    #             labels, nr = ndimage.label(seg, structure = s)

    #             if featureid not in seg:
    #                 np.savetxt(savedir+ 'features_'+ str(year) +str(month)+ str(cell) + '.txt', [idx, featureid])
    #                 continue
    #             else:
    #                 label = np.unique(labels[ seg == featureid])[0]
    #                 seg_mask = seg.where(labels == label)

    #                 # create mask as coordinates                                                                                                              
    #                 seg_mask.coords['mask'] = (('lon', 'lat'), seg_mask)                        
    #                 # Elevation mask                                                                                                                          
    #                 elevation_values = dem_mask.where(seg_mask.coords['mask'].values > 0)
    #                 arr= elevation_values.values.flatten()
    #                 values = arr[~np.isnan(arr)]
    #                 mountain_features = values[values >=3000].shape[0]
    #                 tracks['tp_flag'][(tracks.feature == featureid) & (tracks.idx == idx)& (tracks.cell== cell)] =  mountain_features

    # tracks.to_hdf(os.path.join(savedir,'Tracks_'+ str(year) +'_precip_tpflag.h5'),'table' ) 
    # print('TP attribution for year  '+ str(year) +'performed.') 



